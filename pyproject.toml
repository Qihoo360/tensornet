[project]
name = "qihoo-tensornet"
version = "0.102.1.rc"
description = "a TensorFlow-based distributed training framework optimized for large-scale sparse data"
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.5"
authors = [
  { name = "jiangxinglei", email = "jiangxinglei@360.cn" },
  { name = "gaozhiming", email = "gaozhiming@360.cn" },
]
classifiers = [
  'Development Status :: 5 - Production/Stable',
  'Intended Audience :: Developers',
  'License :: OSI Approved :: Apache Software License',
  'Programming Language :: Python :: 3 :: Only',
  'Programming Language :: Python :: 3.5',
  'Programming Language :: Python :: 3.6',
  'Programming Language :: Python :: 3.7',
  'Programming Language :: Python :: 3.8',
]
dependencies = [
  # use tensorflow from pypi, with cxx11 abi = 0
  "tensorflow-cpu >=2.2,<2.3",

  "opentelemetry-api",
  "opentelemetry-sdk",
]

[project.urls]
homepage = "https://github.com/Qihoo360/tensornet"
issues = "https://github.com/Qihoo360/tensornet/issues"
releasenotes = "https://github.com/Qihoo360/tensornet/releases"

[build-system]
requires = ["setuptools>=61.0.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
platforms = ["manylinux2010_x86_64"]

[tool.pixi.workspace]
channels = ["conda-forge"]
platforms = ["linux-64", "osx-arm64"]
requires-pixi = ">=0.49"

[tool.pixi.activation]
scripts = [".pixi/rc.sh"]

[tool.pixi.pypi-options]
no-build = true # required no-build for selecting grpcio<1.47 and h5py<3.8 on CentOS 6

[tool.pixi.system-requirements]
linux = "2.6"                                 # run on centos 6
libc = { family = "glibc", version = "2.12" } # run on centos 6

[tool.pixi.feature.centos7.system-requirements]
linux = "3.10"                                # run on centos 7
libc = { family = "glibc", version = "2.17" } # run on centos 7

[tool.pixi.feature.build]
platforms = ["linux-64"]

[tool.pixi.feature.build.dependencies]
# build toolchains
cmake = ">=3.29"
gxx = "*"
sysroot_linux-64 = "<2.13" # for running on CentOS 6
patch = "*"
protobuf = ">=3.8,<3.9"    # tf 2.2 use pb 3.8

# build dependencies
gflags = { version = "*", build = "*_0" }      # build with cxx_abi=0
leveldb = { version = "<1.20", build = "*_1" } # build with cxx_abi=0
boost = "*"

# build and runtime dependencies
nomkl = "*"
openmpi = ">=3,<5"
numpy = "<1.19.0"  # required by tensorflow 2.2.3

# test-only dependencies
gtest = { version = "<1.10", build = "*_0" } # build with cxx_abi=0

# python package tools
twine = "*"        # check and upload pypi package
python-build = "*"
make = ">=4.3,<5"

[tool.pixi.feature.build.tasks]
configure = "cmake --preset default -S ."
build = "./cmake-build"
ut = "./cmake-build --preset default -t test"
ut-only = "cmake-build --test"
workflow = "cmake --workflow --preset default"
create-wheel = "python3 -m build -w -n"
create-tools-wheel = { cmd = "python3 -m build -w -n", cwd = "tensornet_tools" }

bazel-build = "NEED_ACTIVATE_ENV=false \"$PIXI_PROJECT_ROOT\"/manager build --subcommands --verbose_failures"
copy-libs = "NEED_ACTIVATE_ENV=false \"$PIXI_PROJECT_ROOT\"/manager copy-libs"
dist = "NEED_ACTIVATE_ENV=false \"$PIXI_PROJECT_ROOT\"/manager create_dist"

[tool.pixi.feature.py37]
platforms = ["linux-64"]
dependencies = { python = ">=3.7,<3.8" } # to build wrapper for py37
[tool.pixi.feature.py36]
platforms = ["linux-64"]
dependencies = { python = ">=3.6,<3.7" } # to build wrapper for py36
[tool.pixi.feature.py35]
platforms = ["linux-64"]
dependencies = { python = ">=3.5,<3.6a1" } # to build wrapper for py35

[tool.pixi.feature.tools]
platforms = ["linux-64", "osx-arm64"]

[tool.pixi.feature.tools.dependencies]
actionlint = "*"
bump-my-version = "*"
check-wheel-contents = "*"
clang-format = "*"
cmakelang = '*'
go-shfmt = "*"
pre-commit = "*"
pre-commit-hooks = "*"
ruff = "*"
shellcheck = '*'
taplo = "*"
typos = "*"
yamlfmt = "*"
insert-license-header = "*"

[tool.pixi.feature.tools.tasks]
bump-release = "./manager release"
bump-version = "./manager bump-version"
pre-commit-install = "pre-commit install --install-hooks -t=pre-commit"
pre-commit-run = "pre-commit run --all-files"
ruff-format = "ruff format --force-exclude"
ruff-lint = "ruff check --fix --exit-non-zero-on-fix --force-exclude"
shell-format = "shfmt --write --indent=2 --simplify --binary-next-line"
toml-format = { cmd = "taplo fmt", env = { RUST_LOG = "warn" } }
license-header-python = "insert-license --license-filepath LICENSE-HEADER --allow-past-years"
license-header-cc = "insert-license --license-filepath LICENSE-HEADER --comment-style //  --allow-past-years"
update-license-header-year = "insert-license --license-filepath LICENSE-HEADER --comment-style '' --no-space-in-comment-prefix --use-current-year LICENSE-HEADER || true"
update-license-year = [
  { task = "update-license-header-year" },
  { task = "pre-commit-run" },
]

[tool.pixi.environments]
default = { features = ["build"] }
py37 = { features = [
  "py37",
  "centos7",
], solve-group = "py37", no-default-feature = true }
py36 = { features = [
  "py36",
  "centos7",
], solve-group = "py36", no-default-feature = true }
py35 = { features = [
  "py35",
  "centos7",
], solve-group = "py35", no-default-feature = true }
tools = { features = [
  "tools",
  "centos7",
], solve-group = "tools", no-default-feature = true }

[tool.bumpversion]
commit = false
tag = false
parse = """(?x)
    (?P<major>0|[1-9]\\d*)\\.
    (?P<minor>0|[1-9]\\d*)\\.
    (?P<patch>0|[1-9]\\d*)
    (?:
        \\.
        (?: post | (?P<release>[a-z]+) )
        (?P<build>[1-9]\\d*)?
    )?
"""
serialize = [
  "{major}.{minor}.{patch}.{release}{build}",
  "{major}.{minor}.{patch}.{release}",
  "{major}.{minor}.{patch}.post{build}",
  "{major}.{minor}.{patch}",
]
[tool.bumpversion.parts.release]
values = ["dev", "rc", "prod"]
optional_value = "prod"
[[tool.bumpversion.files]]
filename = "tensornet/version.py"
[[tool.bumpversion.files]]
filename = "tensornet_tools/pyproject.toml"

[tool.ruff]
line-length = 120
target-version = "py38"
exclude = ["doc/tutorial/", "tensornet/core/gen_*_ops.py"]
[tool.ruff.format]
indent-style = "space"
quote-style = "double"

[tool.typos.default]
extend-ignore-re = [
  # https://github.com/github/gitignore/pull/4420
  "# IntelliJ project files and plugin configuration\\. Seperate directories are",
]
[tool.typos.default.extend-identifiers]
gather_nd = "gather_nd"
[tool.typos.default.extend-words]
mape = "mape"
