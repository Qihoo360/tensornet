[project]
name = "qihoo-tensornet"
version = "0.102.0.dev"
description = "build tensornet"
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.5"
authors = [
  { name = "jiangxinglei", email = "jiangxinglei@360.cn" },
  { name = "gaozhiming", email = "gaozhiming@360.cn" },
]
classifiers = [
  'Development Status :: 5 - Production/Stable',
  'Intended Audience :: Developers',
  'License :: OSI Approved :: Apache Software License',
  'Programming Language :: Python :: 3 :: Only',
  'Programming Language :: Python :: 3.5',
  'Programming Language :: Python :: 3.6',
  'Programming Language :: Python :: 3.7',
  'Programming Language :: Python :: 3.8',
]

[project.optional-dependencies]
# use tensorflow from pypi, with cxx11 abi = 0
build = ["tensorflow-cpu >=2.2,<2.3"]

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[tool.pixi.workspace]
channels = ["conda-forge"]
platforms = ["linux-64", "osx-arm64"]
requires-pixi = ">=0.44"

[tool.pixi.activation]
scripts = [".pixi/rc.sh"]

[tool.pixi.pypi-options]
no-build = true # required no-build for selecting grpcio<1.47 and h5py<3.8 on CentOS 6

[tool.pixi.system-requirements]
linux = "2.6"                                 # at least centos 6
libc = { family = "glibc", version = "2.12" } # at least centos 6

[tool.pixi.feature.centos7.system-requirements]
linux = "3.10"                                # at least centos 7
libc = { family = "glibc", version = "2.17" } # at least centos 7

[tool.pixi.feature.build]
platforms = ["linux-64"]

[tool.pixi.feature.build.dependencies]
# build toolchains
cmake = ">=3.29"
gxx = "*"
sysroot_linux-64 = "<2.13" # for running on CentOS 6
patch = "*"
protobuf = ">=3.8,<3.9"    # tf 2.2 use pb 3.8

# build dependencies
gflags = { version = "*", build = "*_0" }      # brpc static dep, build with cxx_abi=0
leveldb = { version = "<1.20", build = "*_1" } # brpc static dep, build with cxx_abi=0
boost = "*"

# build and runtime dependencies
nomkl = "*"
openmpi = "==4.1.3"
numpy = "<1.19.0"   # required by tensorflow 2.2.3

# test-only dependencies
gtest = { version = "<1.10", build = "*_0" } # build with cxx_abi=0

# python package tools
twine = "*"        # check and upload pypi package
python-build = "*"
make = ">=4.3,<5"

[tool.pixi.feature.build.tasks]
configure = "cmake --preset default -S ."
build = "./cmake-build"
ut = "./cmake-build --preset default -t test"
ut-only = "cmake-build --test"
workflow = "cmake --workflow --preset default"
create-wheel = "python3 -m build -w -n"

bazel-build = "NEED_ACTIVATE_ENV=false \"$PIXI_PROJECT_ROOT\"/manager build --subcommands --verbose_failures"
copy-libs = "NEED_ACTIVATE_ENV=false \"$PIXI_PROJECT_ROOT\"/manager copy-libs"
dist = "NEED_ACTIVATE_ENV=false \"$PIXI_PROJECT_ROOT\"/manager create_dist"

[tool.pixi.feature.py37]
platforms = ["linux-64"]
dependencies = { python = ">=3.7,<3.8" } # to build wrapper for py37
[tool.pixi.feature.py36]
platforms = ["linux-64"]
dependencies = { python = ">=3.6,<3.7" } # to build wrapper for py36
[tool.pixi.feature.py35]
platforms = ["linux-64"]
dependencies = { python = ">=3.5,<3.6a1" } # to build wrapper for py35

[tool.pixi.feature.tools]
platforms = ["linux-64", "osx-arm64"]

[tool.pixi.feature.tools.dependencies]
actionlint = "*"
bump-my-version = "*"
check-wheel-contents = "*"
cmakelang = '*'
pre-commit = "*"
pre-commit-hooks = "*"
shellcheck = '*'
taplo = "*"
typos = "*"

[tool.pixi.feature.tools.tasks]
bump-version = "./manager bump-version"
bump-release = "./manager release"
pre-commit-install = "pre-commit install --install-hooks -t=pre-commit"
pre-commit-run = "pre-commit run --all-files"
toml-format = { cmd = "taplo fmt", env = { RUST_LOG = "warn" } }

[tool.pixi.environments]
default = { features = ["build"], solve-group = "default" }
py37 = { features = ["py37", "centos7"], solve-group = "py37" }
py36 = { features = ["py36", "centos7"], solve-group = "py36" }
py35 = { features = ["py35", "centos7"], solve-group = "py35" }
tools = { features = ["tools", "centos7"], solve-group = "tools" }

[tool.bumpversion]
commit = false
tag = false
parse = """(?x)
    (?P<major>0|[1-9]\\d*)\\.
    (?P<minor>0|[1-9]\\d*)\\.
    (?P<patch>0|[1-9]\\d*)
    (?:
        \\.
        (?: post | (?P<release>[a-z]+) )
        (?P<build>[1-9]\\d*)?
    )?
"""
serialize = [
  "{major}.{minor}.{patch}.{release}{build}",
  "{major}.{minor}.{patch}.{release}",
  "{major}.{minor}.{patch}.post{build}",
  "{major}.{minor}.{patch}",
]
[tool.bumpversion.parts.release]
values = ["dev", "rc", "prod"]
optional_value = "prod"
[[tool.bumpversion.files]]
filename = "tensornet/version.py"

[tool.typos.default]
extend-ignore-re = [
  # https://github.com/github/gitignore/pull/4420
  "# IntelliJ project files and plugin configuration\\. Seperate directories are",
]
[tool.typos.default.extend-identifiers]
gather_nd = "gather_nd"
[tool.typos.default.extend-words]
mape = "mape"
